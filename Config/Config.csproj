<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{4FEBF624-EAB7-4054-A72C-CD5EB7766488}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>Config</RootNamespace>
    <AssemblyName>Config</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'UAT|AnyCPU'">
    <DebugSymbols>true</DebugSymbols>
    <OutputPath>bin\UAT\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <DebugType>full</DebugType>
    <PlatformTarget>AnyCPU</PlatformTarget>
    <ErrorReport>prompt</ErrorReport>
    <CodeAnalysisRuleSet>MinimumRecommendedRules.ruleset</CodeAnalysisRuleSet>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="log4net">
      <HintPath>..\packages\log4net.2.0.3\lib\net40-full\log4net.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Configuration" />
    <Reference Include="System.Core" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="System.Data" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="Properties\AssemblyInfo.cs" />
  </ItemGroup>
  <ItemGroup>
    <None Include="packages.config" />
    <None Include="Transforms\log4net\log4net.defaults.xsl">
      <SubType>Designer</SubType>
    </None>
    <None Include="Config.targets">
      <SubType>Designer</SubType>
    </None>
    <None Include="Snippets.xsl" />
    <Content Include="Transforms\log4net\log4net.Debug.xsl" />
    <Content Include="Transforms\log4net\log4net.Release.xsl" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Transform.template.xsl" />
  </ItemGroup>
  <ItemGroup />
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <PropertyGroup>
    <!-- Define some variables to hold the filenames of the Xsl transforms -->
    <ConfigFolder>$(SolutionDir)Config\</ConfigFolder>
    <TransformTemplate>$(ConfigFolder)Transform.template.xsl</TransformTemplate>
    <TransformMerged>$(ConfigFolder)Transform.xsl</TransformMerged>
    <DocComment>Built from configuration '$(Configuration)' on machine $(ComputerName) by $(UserName) at $([System.DateTime]::Now)</DocComment>
  </PropertyGroup>

  <ItemGroup>
    <!-- This group gathers all the individual Xsl transforms for the current configuration -->
    <InputXslFiles Include="$(ConfigFolder)\Transforms\**\*.$(Configuration).xsl" />
  </ItemGroup>

  <ItemGroup>
    <!-- This group gathers all the individual Xsl transforms for the current configuration -->
    <InputXslFiles Include="$(ConfigFolder)\Transforms\**\*.$(Configuration).xsl" />
  </ItemGroup>
  
  <Target Name="BeforeBuild">
    <!-- Do we have Git? -->
    <GitInfo GitExe="C:\Program Files (x86)\Git\bin\git.exe">
      <Output PropertyName="Branch" TaskParameter="Branch" />
      <Output PropertyName="CommitHash" TaskParameter="CommitHash" />
    </GitInfo>

    <PropertyGroup>
      <DocComment Condition="'$(Branch)'==''">$(DocComment)</DocComment>
      <DocComment Condition="'$(Branch)'!=''">$(DocComment)%0D%0A     from Git commit $(CommitHash) on branch $(Branch)</DocComment>
    </PropertyGroup>

    <!-- First amalgamate all the individual transforms into one big Xsl file -->
    <CreateTransformXsl TransformTemplate="$(TransformTemplate)" TransformMerged="$(TransformMerged)" InputXslFiles="@(InputXslFiles)"
                        DocumentComment="$(DocComment)"
                        />
  </Target>
  <Target Name="AfterBuild">
  </Target>

  <UsingTask TaskName="CreateTransformXsl" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" >
    <!-- This task amalgamates all the individual xsl sheets into one big sheet -->
    <ParameterGroup>
      <TransformTemplate ParameterType="System.String" Required="true" />
      <TransformMerged ParameterType="System.String" Required="true" />
      <InputXslFiles ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <DocumentComment ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System"/>
      <Using Namespace="System.IO"/>
      <Using Namespace="System.Text"/>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            Log.LogMessage("CreateTransformXsl: Creating " + TransformMerged + " from " + TransformTemplate, MessageImportance.Normal);
            string inputFile = File.ReadAllText(TransformTemplate);
            var sb = new StringBuilder();
            foreach (var file in InputXslFiles)
            {
              var path = file.GetMetadata("FullPath");
              path = path.Replace("\\", "/");
              sb.AppendFormat("  <xsl:include href=\"{0}\" />", path);
              sb.AppendLine();
            }
            inputFile = inputFile.Replace("<!-- @@Includes -->", sb.ToString());
            inputFile = inputFile.Replace("@@Comment", DocumentComment);
            File.WriteAllText(TransformMerged, inputFile);
            return true;
  ]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask TaskName="GitInfo" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" >
    <ParameterGroup>
      <GitExe ParameterType="System.String" Required="true" />
      <Branch ParameterType="System.String" Output="True" />
      <CommitHash ParameterType="System.String" Output="True" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System"/>
      <Using Namespace="System.Diagnostics"/>
      <Using Namespace="System.IO"/>
      <Using Namespace="System.Text"/>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            Log.LogMessage("GitInfo: Getting git info", MessageImportance.Normal);
            
            try 
            {
              ProcessStartInfo gitInfo = new ProcessStartInfo();
              gitInfo.CreateNoWindow = true;
              gitInfo.RedirectStandardError = true;
              gitInfo.RedirectStandardOutput = true;
              gitInfo.FileName = GitExe;
              gitInfo.UseShellExecute = false;
            
            
              Process gitProcess = new Process();
              gitInfo.Arguments = "symbolic-ref --short head";
              //gitInfo.WorkingDirectory = YOUR_GIT_REPOSITORY_PATH;
              gitProcess.StartInfo = gitInfo;
              gitProcess.Start();
              string stderr_str = gitProcess.StandardError.ReadToEnd();
              string stdout_str = gitProcess.StandardOutput.ReadToEnd();
              gitProcess.WaitForExit();
              gitProcess.Close();
              Branch = stdout_str.Replace("\r", "").Replace("\n", "");
            
              gitProcess = new Process();
              gitInfo.Arguments = "show -s --pretty=format:%H";
              //gitInfo.WorkingDirectory = YOUR_GIT_REPOSITORY_PATH;
              gitProcess.StartInfo = gitInfo;
              gitProcess.Start();
              stderr_str = gitProcess.StandardError.ReadToEnd();
              stdout_str = gitProcess.StandardOutput.ReadToEnd();
              gitProcess.WaitForExit();
              gitProcess.Close();
              CommitHash = stdout_str.Replace("\r", "").Replace("\n", "");
            }
            catch
            {
              CommitHash = "";
              Branch = "";
            }
            
            string msg = String.Format("GitInfo: Returning commit hash of {0} on branch {1}", CommitHash, Branch);
            Log.LogMessage(msg, MessageImportance.Normal);
  ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>