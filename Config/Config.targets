<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <!-- Define some variables to hold the filenames of the Xsl transforms -->
    <ConfigFolder>$(SolutionDir)Config\</ConfigFolder>
    <TransformTemplate>$(ConfigFolder)Transform.template.xsl</TransformTemplate>
    <TransformMerged>$(ConfigFolder)Transform.xsl</TransformMerged>
  </PropertyGroup>

  <!-- This target will run automatically if you include this .targets file in your project file.
       By default it will only process files named *.template.config in the root of your project.
       To process all templates in any subdirectory, set TemplatePattern before importing the 
       .targets file. Example:
       
       <PropertyGroup>
         <TemplatePattern>**\*.template.config</TemplatePattern>
       </PropertyGroup>  
       <Import Project="$(SolutionDir)\Config\Config.targets" />
  -->
  <Target Name="ProcessTemplates" BeforeTargets="BeforeBuild">
    <PropertyGroup>
      <TemplatePattern Condition="$(TemplatePattern) == ''">*.template.config</TemplatePattern>
    </PropertyGroup>
    
    <Message Text="Running ProcessTemplates target to transform $(TemplatePattern) into *.config." />
    
    <ItemGroup>
      <!-- This is the set of all template files that the transforms will be applied to -->
      <Templates Include="$(TemplatePattern)" />
    </ItemGroup>

    <ItemGroup>
      <!-- Augment the group with the final filenames -->
      <Templates>
        <FinalFile>$([System.String]::Copy('%(FullPath)').Replace('.template.', '.'))</FinalFile>
      </Templates>
    </ItemGroup>

    <Message Text="Transforming file %(Templates.FullPath) into %(Templates.FinalFile)" />

    <!-- Now apply the Xsl to every template file. The % is the magic that makes batching occur -->
    <XslTransformation XmlInputPaths="%(Templates.FullPath)"
                   XslInputPath="$(TransformMerged)"
                   OutputPaths="%(Templates.FinalFile)" />
  </Target>  
</Project>
